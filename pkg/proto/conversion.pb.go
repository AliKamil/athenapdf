// Code generated by protoc-gen-go. DO NOT EDIT.
// source: conversion.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	conversion.proto
	cookie.proto
	header.proto
	option.proto
	process.proto

It has these top-level messages:
	Conversion
	Cookie
	Header
	Option
	Process
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Conversion_Dimensions_Orientation int32

const (
	Conversion_Dimensions_PORTRAIT  Conversion_Dimensions_Orientation = 0
	Conversion_Dimensions_LANDSCAPE Conversion_Dimensions_Orientation = 1
)

var Conversion_Dimensions_Orientation_name = map[int32]string{
	0: "PORTRAIT",
	1: "LANDSCAPE",
}
var Conversion_Dimensions_Orientation_value = map[string]int32{
	"PORTRAIT":  0,
	"LANDSCAPE": 1,
}

func (x Conversion_Dimensions_Orientation) String() string {
	return proto1.EnumName(Conversion_Dimensions_Orientation_name, int32(x))
}
func (Conversion_Dimensions_Orientation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

type Conversion struct {
	Uri        string                 `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	MimeType   string                 `protobuf:"bytes,2,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
	Dimensions *Conversion_Dimensions `protobuf:"bytes,3,opt,name=dimensions" json:"dimensions,omitempty"`
	Options    map[string]*Option     `protobuf:"bytes,4,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Headers    []*Header              `protobuf:"bytes,16,rep,name=headers" json:"headers,omitempty"`
	Cookies    []*Cookie              `protobuf:"bytes,17,rep,name=cookies" json:"cookies,omitempty"`
}

func (m *Conversion) Reset()                    { *m = Conversion{} }
func (m *Conversion) String() string            { return proto1.CompactTextString(m) }
func (*Conversion) ProtoMessage()               {}
func (*Conversion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Conversion) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Conversion) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *Conversion) GetDimensions() *Conversion_Dimensions {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Conversion) GetOptions() map[string]*Option {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Conversion) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Conversion) GetCookies() []*Cookie {
	if m != nil {
		return m.Cookies
	}
	return nil
}

type Conversion_Dimensions struct {
	MarginBottom float64                           `protobuf:"fixed64,1,opt,name=margin_bottom,json=marginBottom" json:"margin_bottom,omitempty"`
	MarginLeft   float64                           `protobuf:"fixed64,2,opt,name=margin_left,json=marginLeft" json:"margin_left,omitempty"`
	MarginRight  float64                           `protobuf:"fixed64,3,opt,name=margin_right,json=marginRight" json:"margin_right,omitempty"`
	MarginTop    float64                           `protobuf:"fixed64,4,opt,name=margin_top,json=marginTop" json:"margin_top,omitempty"`
	PageHeight   float64                           `protobuf:"fixed64,5,opt,name=page_height,json=pageHeight" json:"page_height,omitempty"`
	PageWidth    float64                           `protobuf:"fixed64,6,opt,name=page_width,json=pageWidth" json:"page_width,omitempty"`
	Orientation  Conversion_Dimensions_Orientation `protobuf:"varint,8,opt,name=orientation,enum=proto.Conversion_Dimensions_Orientation" json:"orientation,omitempty"`
}

func (m *Conversion_Dimensions) Reset()                    { *m = Conversion_Dimensions{} }
func (m *Conversion_Dimensions) String() string            { return proto1.CompactTextString(m) }
func (*Conversion_Dimensions) ProtoMessage()               {}
func (*Conversion_Dimensions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Conversion_Dimensions) GetMarginBottom() float64 {
	if m != nil {
		return m.MarginBottom
	}
	return 0
}

func (m *Conversion_Dimensions) GetMarginLeft() float64 {
	if m != nil {
		return m.MarginLeft
	}
	return 0
}

func (m *Conversion_Dimensions) GetMarginRight() float64 {
	if m != nil {
		return m.MarginRight
	}
	return 0
}

func (m *Conversion_Dimensions) GetMarginTop() float64 {
	if m != nil {
		return m.MarginTop
	}
	return 0
}

func (m *Conversion_Dimensions) GetPageHeight() float64 {
	if m != nil {
		return m.PageHeight
	}
	return 0
}

func (m *Conversion_Dimensions) GetPageWidth() float64 {
	if m != nil {
		return m.PageWidth
	}
	return 0
}

func (m *Conversion_Dimensions) GetOrientation() Conversion_Dimensions_Orientation {
	if m != nil {
		return m.Orientation
	}
	return Conversion_Dimensions_PORTRAIT
}

func init() {
	proto1.RegisterType((*Conversion)(nil), "proto.Conversion")
	proto1.RegisterType((*Conversion_Dimensions)(nil), "proto.Conversion.Dimensions")
	proto1.RegisterEnum("proto.Conversion_Dimensions_Orientation", Conversion_Dimensions_Orientation_name, Conversion_Dimensions_Orientation_value)
}

func init() { proto1.RegisterFile("conversion.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x71, 0xbb, 0x6e, 0xed, 0x4b, 0x8b, 0x82, 0x4f, 0x56, 0xf9, 0x15, 0xb6, 0x03, 0x11,
	0x87, 0x1c, 0xca, 0x65, 0x42, 0x5c, 0x4a, 0x37, 0x69, 0x43, 0x13, 0x9d, 0x4c, 0x24, 0x8e, 0x51,
	0xb6, 0xbe, 0x35, 0x56, 0x97, 0x38, 0x72, 0xbc, 0xa2, 0xfc, 0x35, 0xfc, 0x43, 0xfc, 0x51, 0xc8,
	0x76, 0xd2, 0x04, 0x21, 0x71, 0x6a, 0xfd, 0x79, 0xdf, 0xcf, 0xb3, 0xf3, 0x6c, 0xf0, 0xef, 0x65,
	0xb1, 0x47, 0x55, 0x09, 0x59, 0x44, 0xa5, 0x92, 0x5a, 0xd2, 0x91, 0xfd, 0x99, 0x4f, 0xef, 0xa5,
	0xdc, 0x09, 0x8c, 0x9a, 0x55, 0x86, 0xe9, 0x06, 0x55, 0xbb, 0x92, 0xa5, 0x3e, 0x08, 0xa7, 0xbf,
	0x46, 0x00, 0xab, 0x43, 0x17, 0xea, 0xc3, 0xf0, 0x49, 0x09, 0x46, 0x02, 0x12, 0x4e, 0xb8, 0xf9,
	0x4b, 0x5f, 0xc2, 0x24, 0x17, 0x39, 0x26, 0xba, 0x2e, 0x91, 0x0d, 0x2c, 0x1f, 0x1b, 0x10, 0xd7,
	0x25, 0xd2, 0xcf, 0x00, 0x1b, 0x91, 0x63, 0x61, 0xdc, 0x8a, 0x0d, 0x03, 0x12, 0x7a, 0x8b, 0x57,
	0xae, 0x73, 0xd4, 0x75, 0x8d, 0x2e, 0x0e, 0x19, 0xde, 0xcb, 0xd3, 0x73, 0x38, 0x71, 0x67, 0xa9,
	0xd8, 0x51, 0x30, 0x0c, 0xbd, 0xc5, 0x9b, 0x7f, 0xd5, 0xb5, 0x0b, 0x5c, 0x16, 0x5a, 0xd5, 0xbc,
	0x8d, 0xd3, 0xf7, 0x70, 0xe2, 0xbe, 0xa9, 0x62, 0xbe, 0x35, 0x67, 0x8d, 0x79, 0x65, 0x29, 0x6f,
	0xab, 0x26, 0xe8, 0x46, 0x51, 0xb1, 0x17, 0x7f, 0x05, 0x57, 0x96, 0xf2, 0xb6, 0x3a, 0xff, 0x3d,
	0x00, 0xe8, 0x8e, 0x49, 0xcf, 0x60, 0x96, 0xa7, 0x6a, 0x2b, 0x8a, 0xe4, 0x4e, 0x6a, 0x2d, 0x73,
	0x3b, 0x11, 0xc2, 0xa7, 0x0e, 0x7e, 0xb1, 0x8c, 0xbe, 0x05, 0xaf, 0x09, 0x3d, 0xe2, 0x83, 0xb6,
	0xc3, 0x21, 0x1c, 0x1c, 0xba, 0xc1, 0x07, 0x4d, 0xdf, 0x41, 0x23, 0x24, 0x4a, 0x6c, 0x33, 0x6d,
	0x07, 0x44, 0x78, 0x23, 0x71, 0x83, 0xe8, 0x6b, 0x68, 0x84, 0x44, 0xcb, 0x92, 0x1d, 0xd9, 0xc0,
	0xc4, 0x91, 0x58, 0x96, 0x66, 0x8b, 0x32, 0xdd, 0x62, 0x92, 0xa1, 0x6d, 0x30, 0x72, 0x5b, 0x18,
	0x74, 0x85, 0xad, 0x6f, 0x03, 0x3f, 0xc5, 0x46, 0x67, 0xec, 0xd8, 0xf9, 0x86, 0xfc, 0x30, 0x80,
	0x7e, 0x05, 0x4f, 0x2a, 0x81, 0x85, 0x4e, 0xcd, 0xe0, 0xd8, 0x38, 0x20, 0xe1, 0xf3, 0x45, 0xf8,
	0xbf, 0x1b, 0x8a, 0xd6, 0x5d, 0x9e, 0xf7, 0xe5, 0xd3, 0x0f, 0xe0, 0xf5, 0x6a, 0x74, 0x0a, 0xe3,
	0xdb, 0x35, 0x8f, 0xf9, 0xf2, 0x3a, 0xf6, 0x9f, 0xd1, 0x19, 0x4c, 0x6e, 0x96, 0xdf, 0x2e, 0xbe,
	0xaf, 0x96, 0xb7, 0x97, 0x3e, 0x99, 0x5f, 0xc3, 0xb4, 0x7f, 0x73, 0xe6, 0x5d, 0xed, 0xb0, 0x6e,
	0xdf, 0xd5, 0x0e, 0x6b, 0x7a, 0x06, 0xa3, 0x7d, 0xfa, 0xf8, 0xe4, 0xde, 0x54, 0x77, 0x2f, 0xce,
	0xe2, 0xae, 0xf6, 0x69, 0x70, 0x4e, 0xee, 0x8e, 0x6d, 0xe1, 0xe3, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe0, 0xc3, 0x07, 0x27, 0xed, 0x02, 0x00, 0x00,
}
